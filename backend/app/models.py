from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union
from datetime import datetime
from bson import ObjectId

# Helper for working with MongoDB ObjectIDs in Pydantic
class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return ObjectId(v)

    @classmethod
    def __modify_schema__(cls, field_schema):
        field_schema.update(type="string")

# Vector and Section models
class DocumentVector(BaseModel):
    """Represents a vector embedding for a document or section"""
    vector_type: str  # "document" or "section"
    vector: List[float]  # The actual vector embedding
    model_used: str  # e.g., "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
    section_id: Optional[str] = None  # Only for section vectors, to identify which section
    dimensions: int  # Dimensionality of the vector (e.g., 384, 768)
    created_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        arbitrary_types_allowed = True

class DocumentSection(BaseModel):
    """Represents a section of a document"""
    section_id: str  # Unique identifier for the section within the document
    title: Optional[str] = None
    content: str
    start_offset: int  # Character offset in the full document
    end_offset: int
    section_type: Optional[str] = None  # e.g., "introduction", "methodology", "conclusion"
    vectors: Optional[List[DocumentVector]] = None
    
    class Config:
        arbitrary_types_allowed = True

# Author models
class AuthorDemographics(BaseModel):
    """Demographic information about an author"""
    nationality: Optional[str] = None
    race: Optional[str] = None
    ethnicity: Optional[str] = None
    gender: Optional[str] = None # "non-binary", "female", "male" - should "female" and "male" be broken into "transgender" and "cisgender" options?
    sexual_orientation: Optional[str] = None

class PersonAuthor(BaseModel):
    """Information about an individual person as an author"""
    paternal_last_name: str
    maternal_last_name: Optional[str] = None
    first_name: str
    demographics: Optional[AuthorDemographics] = None
    is_primary: bool = False  # Indicates if this is the primary author
    
    class Config:
        arbitrary_types_allowed = True

class OrganizationAuthor(BaseModel):
    """Information about an organization as an author"""
    institution_name: str
    institution_type: Optional[str] = None
    country: Optional[str] = None

# Document similarity tracking
class DocumentSimilarity(BaseModel):
    source_doc_id: PyObjectId
    target_doc_id: PyObjectId
    similarity_score: float
    vector_type: str  # "document" or "section"
    section_pair: Optional[Dict[str, str]] = None  # Maps source section_id to target section_id
    created_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}

# Main Document Metadata model
class DocumentMetadata(BaseModel):
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    title: str
    document_type: str  # "person_authored", "organization_authored", or "mixed_authorship"
    
    # Shared fields
    ## Administrative information
    status: str  # "new", "validated", "deprecated", "rejected"
    permission: str # "publicly available", "permission obtained from primary author", "permission obtained from publisher", "permission not obtained - for private collection"

    ## Document routing information
    corpora: str # "tl (translation & localization)", "gai", "usmex (U.S.-Mexico relations)"
    language_family: str  # ISO 639-3 (e.g., "spa", "eng")
    language_variant: str # ISO 3166-1 alpha-3 (e.g., "MEX", "USA")

    ## Purpose of this information?
    # category: str # To be incorporated once categories within the corpora have been identified by clustering algorithms
    keywords: List[str] = [] # Could this be generated by clustering algorithms?
    summary: Optional[str] = None # Is this necessary? Does this aid in genAI processing? Is this helpful for human understanding?

    ## Specifications - matches translation specifications in UI
    text_type: str # "journal article", "book chapter", "case study", "blog post", "essay", "FAQ", "policy", "press release", "report", "review", "tutorial", "translation" - Translations automatically rejected from corpus in keeping with best practices for special language corpora formation
    purpose: str # "informational", "persuasive", "philosophical", "entertainment"
    point_of_view: str
    audience: Optional[str] = None
    reach: Optional[str] = None 
    word_count: Optional[int] = None # Approximate value calculated from txt files once those have been created; used to measure the reliability of the corpus in terms of word count - for special language corpora, a starter word count of 100,000 is recommended
    
    # Content storage
    content_text: Optional[str] = None  # The full text content 
    file_path: str  # Path to processed text file
    original_file_path: Optional[str] = None  # Path to original document
    content_url: Optional[str] = None  # URL if content is linked rather than uploaded
    corpus_path: Optional[str] = None  # e.g., "tl/en-US/processed/Smith_TranslationQuality_2022.txt"
    
    # Document structure
    sections: Optional[List[DocumentSection]] = None
    
    # Vector embeddings for the whole document
    vectors: Optional[List[DocumentVector]] = None
    
    # For knowledge graph connections
    entity_references: Optional[Dict[str, List[str]]] = None  # Entity type -> list of entity IDs
    
    # Publication info
    publication_year: Optional[int] = None
    publisher: Optional[str] = None
    # place_of_publication: Optional[str] = None # No longer required in citations - just APA and Chicago, or also MLA?
    
    # Book info if applicable
    book_title: Optional[str] = None
    editors: Optional[List[str]] = []
    translators: Optional[List[str]] = [] # Should translator information go closer to the top?
    # page_range_start: # No longer required in citations - just APA and Chicago, or also MLA?
    # page_range_finish: # No longer required in citations - just APA and Chicago, or also MLA?

    # Journal info if applicable
    journal_title: Optional[str] = None
    
    # Author information - organizations or people or both
    person_authors: Optional[List[PersonAuthor]] = None
    organization_authors: Optional[List[OrganizationAuthor]] = None
    
    # Metadata about the submission itself
    contributor: str  # Person submitting this content
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
        schema_extra = {
            "example": {
                "title": "Translation Quality Metrics",
                "document_type": "person_authored",
                "status": "validated",
                "permission": "publicly_available",
                "language_family": "eng",
                "language_variant": "English - United States",
                "country_code": "USA",
                "subcorpora": ["Quality Management"],
                "category": "Translation",
                "subcategory": "quality_assessment",
                "keywords": ["metrics", "quality", "assessment"],
                "summary": "This paper discusses translation quality metrics...",
                "text_type": "academic",
                "audience": ["Quality Managers", "Researchers/Academics"],
                "word_count": 3500,
                "file_path": "Smith_TranslationQuality_2022.txt",
                "original_file_path": "Smith_TranslationQuality_2022.pdf",
                "corpus_path": "tl/en-US/processed/Smith_TranslationQuality_2022.txt",
                "content_url": None,
                "publication_year": 2022,
                "publisher": "Journal of Translation Studies",
                "place_of_publication": "New York",
                "book_journal_title": "Journal of Translation Studies",
                "editors": [],
                "translators": [],
                "person_authors": [
                    {
                        "paternal_last_name": "Smith",
                        "maternal_last_name": "",
                        "first_name": "John",
                        "is_primary": True,
                        "demographics": {
                            "nationality": "United States",
                            "race": None,
                            "ethnicity": None,
                            "gender": "Male",
                            "sexual_orientation": None
                        }
                    },
                    {
                        "paternal_last_name": "Garcia",
                        "maternal_last_name": "",
                        "first_name": "Maria",
                        "is_primary": False,
                        "demographics": {
                            "nationality": "Mexico",
                            "race": None,
                            "ethnicity": None,
                            "gender": "Female",
                            "sexual_orientation": None
                        }
                    }
                ],
                "organization_authors": [],
                "contributor": "Jane Doe",
                "created_at": "2025-04-01T12:00:00.000Z",
                "updated_at": "2025-04-01T12:00:00.000Z",
                "sections": [
                    {
                        "section_id": "introduction",
                        "title": "Introduction",
                        "content": "This paper explores...",
                        "start_offset": 0,
                        "end_offset": 500,
                        "section_type": "introduction"
                    }
                ],
                "vectors": [
                    {
                        "vector_type": "document",
                        "vector": [0.1, 0.2, 0.3, 0.4],
                        "model_used": "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2",
                        "dimensions": 384,
                        "created_at": "2025-04-01T12:00:00.000Z"
                    }
                ],
                "entity_references": {
                    "standard": ["ISO_17100", "ASTM_F2575"],
                    "concept": ["translation_quality", "metrics"]
                }
            }
        }

# For response models (without certain fields)
class DocumentMetadataResponse(BaseModel):
    id: str = Field(..., alias="_id")
    title: str
    document_type: str
    status: str
    language_family: str
    category: Optional[str] = None
    keywords: List[str] = []
    
    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}